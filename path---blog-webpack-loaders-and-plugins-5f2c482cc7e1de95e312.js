webpackJsonp([49136975498759],{362:function(n,s){n.exports={data:{site:{meta:{title:"Kanishkar J",siteDescr:"Kanishkar J",siteUrl:"https://kanishkarj.github.com/",siteAuthor:"Kanishkar J",siteTwitterUrl:"https://twitter.com/_kanishkarj_",siteGithubUrl:"https://github.com/kanishkarj",siteEmailUrl:"kanishkarj@hotmail.com",siteGitconnectedUrl:"https://gitconnected.com/kanishkarj"}},markdownRemark:{id:"/home/kanishkarj/work/kanishkarj.github.io/src/pages/markdown/blog/webpack-3-3-2018/post.md absPath of file >>> MarkdownRemark",html:'<h1>Webpack Configuration Part 2 : HTML, CSS and JS</h1>\n<p>In this blog post, we’ll set up webpack to read ES6/ES7 and transcompile them back to ES5. Then we’ll process SASS to CSS. First let’s learn what are loaders and plugins.</p>\n<p><em>Loaders:</em> They allow one to load files other than javascript and process them. Loaders can be configured by defining 2 things <em>test</em> and <em>use</em>. <em>test</em> defines what type of files will be selected and <em>use</em> defines which loader will operate over it. Eg :</p>\n<div class="gatsby-highlight">\n      <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n  test<span class="token operator">:</span> /\\.js$/<span class="token punctuation">,</span>\n  use<span class="token operator">:</span> \'raw-loader\'\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p><em>Plugins:</em> Loaders are specific to particular file types. But plugins are more generalized and powerful. They can be used to perform tasks like minification. They can be used by importing them and adding them to the plugins array. The instances of the plugins are configurable.</p>\n<p>First, we define the <em>module</em>  object right after the output object in webpack.common.js. then inside it, we define an array called <em>rules</em> which will consist of configuration for each loader.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript">output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n <span class="token comment">// ... Other Config ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\nmodule<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n     <span class="token comment">// Loaders are defined in here</span>\n <span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h3>Setting up Javascript: ES7 to ES5</h3>\n<p>We shall use the <em>babel-loader</em> package to read ES7 js files. To install babel-loader and few other packages dependent on it, execute the following command on the command line :</p>\n<div class="gatsby-highlight">\n      <pre class="language-shell"><code class="language-shell">npm install -D babel-loader babel-core babel-polyfill babel-preset-env</code></pre>\n      </div>\n<p>Now we will define a Loader to read javascript and transcompile it from ES7 to ES5( latest standard supported by all the browsers). let’s add a config object inside the rules array :  </p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n   <span class="token punctuation">{</span>\n    test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span>\n    include<span class="token punctuation">:</span> <span class="token regex">/src/</span><span class="token punctuation">,</span>\n    exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>\n    use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'babel-loader\'</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n <span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p><em>test</em> : This attribute defines what kind of file extensions should webpack parse for this particular loader. It is defined using a Regular Expression. Here we are parsing Javascript files hence we write <em>/.js$/</em>.</p>\n<p><em>include</em> : This defines the directory webpack should look into (referenced from project root).</p>\n<p><em>exclude</em> : This defines which directory the loader should avoid while parsing.</p>\n<p><em>use</em> : This tells which loader it should use. Here the use attribute is defined in a simple way. The actual configuration of babel-loader is done in <em>.babelrc</em> :</p>\n<p><strong>.babelrc</strong></p>\n<div class="gatsby-highlight">\n      <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"env"</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>That is a basic configuration, for more knowledge about configuring babel <a href="https://babeljs.io/docs/plugins/preset-env/">check this</a>.</p>\n<p>Now let’s test if our configuration works. enter the following code inside <em>/src/assets/app.js</em> :</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">func</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Then run <code class="language-text">npm build</code> on your command line. Open the <code class="language-text">/dist/</code> folder, and you can see bundled files in it. Now open src/assets/app.js and search for “console.log(5)”, you should find it. If you noticed above, the code we wrote was written in ES7 but the bundled code is in ES5.</p>\n<h2>Clear <code class="language-text">dist</code> directory</h2>\n<p>Every time we bundle the code, we have to clear the dist directory manually. Hence we’ll use a plugin to do this job for us. First let’s install it, run the following in your command line : </p>\n<div class="gatsby-highlight">\n      <pre class="language-shell"><code class="language-shell">npm i -D clean-webpack-plugin</code></pre>\n      </div>\n<p>Now import the plugin in our <code class="language-text">webpack.common.js</code> file :</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// ... other imports</span>\n<span class="token keyword">const</span> CleanWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'clean-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ... config</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Plugins are defined in an array inside the config object. Now inside this array we instantiate the CleanWebpackPlugin object with the directory to clean as a parameter (dist).</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n <span class="token comment">// ... config</span>\n module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n   <span class="token comment">// ...</span>\n <span class="token punctuation">}</span><span class="token punctuation">,</span>\n plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n   <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'dist\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n <span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>For more information on CleanWebpackPlugin check out the docs <a href="https://github.com/johnagan/clean-webpack-plugin">here</a>.</p>\n<p>Until now we only we only have bundled JS files, what about other files such as HTML and CSS ? let’s get to it.</p>\n<h2>Reading HTML files</h2>\n<p>This is how we will implement reading HTML files. First webpack reads the HTML file as string, then it prints the string back into a HTML file in the directory specified. It is easy to do this, we’ll do this with the help of a loader and a plugin : </p>\n<p><a href="https://github.com/webpack-contrib/html-loader">html-loader</a> : Exports HTML as string. HTML is minimized when the compiler demands.\n<a href="https://github.com/jantimon/html-webpack-plugin">html-webpack-plugin</a> : Simplifies creation of HTML files to serve your webpack bundles.</p>\n<p>let’s install them : </p>\n<div class="gatsby-highlight">\n      <pre class="language-shell"><code class="language-shell">npm i -D html-loader html-webpack-plugin</code></pre>\n      </div>\n<p>The config for HTML loader. It is similar to the config we wrote for js :</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript">  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    <span class="token punctuation">{</span>\n      test<span class="token punctuation">:</span> <span class="token regex">/\\.(html)$/</span><span class="token punctuation">,</span>\n      use<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'html-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          minimize<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n          removeComments<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n          collapseWhitespace<span class="token punctuation">:</span> <span class="token boolean">true</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre>\n      </div>\n<p><em>use.options.minimize</em> : To minify the html files.<br>\n<em>use.options.removeComments</em> : All the comments in the HTML file will be discarded.<br>\n<em>use.options.collapseWhitespace</em> : All whitespaces will be removed.               </p>\n<p>The Above configuration will reduce the bundle size. Hence will have a great impact on the performance.</p>\n<p>Import <code class="language-text">html-webpack-plugin</code> in webpack.common.js :\n<br>\n<strong>webpack.common.js</strong></p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'html-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Then config for html plugin :</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript">  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      filename<span class="token punctuation">:</span> <span class="token string">\'index.html\'</span><span class="token punctuation">,</span>\n      template<span class="token punctuation">:</span> <span class="token string">\'index.html\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span></code></pre>\n      </div>\n<p>Here we specify two attributes :\n<em>filename</em> : It Specified the output filename\n<em>template</em> : It Specified the input filename</p>\n<p>Now to test whether everything is working, first write the following in <code class="language-text">index.html</code> :</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Page Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>Then run <code class="language-text">npm run</code> in the command line. Now if you notice carefully, the <code class="language-text">dist</code> directory is being deleted and created again. Also index.html is created, if you open it and compare it with the  index.html of <code class="language-text">/dist/</code>. You will notice webpack added an additional line :<br>\n<code class="language-text">&lt;script type=&quot;text/javascript&quot; src=&quot;assets/js/app.bundle.js&quot;&gt;&lt;/script&gt;</code></p>\n<p>Thats webpack linking the bundled js file for you.</p>\n<h2>CSS and SASS</h2>\n<p>For processing CSS/SASS through webpack it first loads the css first into the js file then it is extracted from it and emmited into a file. To use SASS, webpack trancompiles SASS to CSS and then performs the above mentioned procedure. The list of plugins we need are :</p>\n<ul>\n<li>node-sass : Provides binding for Node.js to LibSass. The sass-loader requires node-sass and webpack as peerDependency. Thus you are able to control the versions accurately.</li>\n<li>sass-loader : Loads a SASS/SCSS file and compiles it to CSS</li>\n<li>css-loader : Interprets @import and url() like import/require() and will resolve them.</li>\n<li>extract-text-webpack-plugin : Extract text from a bundle, or bundles, into a separate file.</li>\n<li>style-loader : Loads the CSS file into the html document with the help of style tag.</li>\n</ul>\n<blockquote>\n<p><strong>Note</strong><br>\nBefore using node-sass ensure the SASS command line tool is installed in your system.  </p>\n</blockquote>\n<p>Now we install the dependencies :</p>\n<div class="gatsby-highlight">\n      <pre class="language-shell"><code class="language-shell">npm i -D sass-loader node-sass css-loader style-loader extract-text-webpack-plugin@next</code></pre>\n      </div>\n<p>First we import <code class="language-text">extract-text-webpack-plugin</code> and then instantiate it with the file output path.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// ....</span>\n<span class="token keyword">const</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'extract-text-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n<span class="token keyword">const</span> ExtractCSSPlugin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  filename<span class="token punctuation">:</span> <span class="token string">\'./assets/css/index.css\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Now let’s configure webpack to use CSS and SASS loader :</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// ...</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.scss$/</span><span class="token punctuation">,</span>\n        include<span class="token punctuation">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'../src\'</span><span class="token punctuation">,</span> <span class="token string">\'assets\'</span><span class="token punctuation">,</span> <span class="token string">\'scss\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> ExtractCSSPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n          use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span>\n              loader<span class="token punctuation">:</span><span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n              options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                minimize <span class="token punctuation">:</span> <span class="token boolean">true</span>\n              <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">{</span>\n              loader<span class="token punctuation">:</span><span class="token string">\'sass-loader\'</span><span class="token punctuation">,</span>\n                options<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">]</span><span class="token punctuation">,</span>\n          fallback<span class="token punctuation">:</span> <span class="token string">\'style-loader\'</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// ...</span>\n    ExtractCSSPlugin\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Now that needs some explanation.</p>\n<ul>\n<li><em>test and include</em> : That should be obvious.</li>\n<li>\n<p><em>use</em> : Here we are calling ExtractCSSPlugin.extract function with a configuration object as parameter.</p>\n<ul>\n<li>First we define an array called <code class="language-text">use</code> inside it which will hold configurations for the loaders we’ll be using.</li>\n<li>If you notice the CSS loader has an option minimize set to true. this minifies the generated CSS file.</li>\n<li>The next config object is the sass-loader</li>\n<li><em>fallback</em> : Loader that should be used when the CSS is not extracted(i.e. in an additional chunk when allChunks: false).</li>\n</ul>\n</li>\n<li>We also have added the extractPlugin to the plugins array.</li>\n</ul>\n<p>Now let’s test this. Add the following style to <em>/assets/scss/app.scss</em> :</p>\n<div class="gatsby-highlight">\n      <pre class="language-scss"><code class="language-scss"><span class="token property"><span class="token variable">$bgcolor</span></span><span class="token punctuation">:</span> #a80c0c<span class="token punctuation">;</span>\n<span class="token selector">body </span><span class="token punctuation">{</span>\n    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token variable">$bgcolor</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>For webpack to recognise the SASS file we have to import it in our app.js :</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'../scss/app.scss\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Now let’s test if everything is working. Open command line and run <code class="language-text">npm run build</code>. Now if you open `/dist/assets/css/app.css’, you should be able to see :</p>\n<div class="gatsby-highlight">\n      <pre class="language-css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span>#a80c0c<span class="token punctuation">}</span></code></pre>\n      </div>\n<h2>Loading images</h2>\n<p>Currently our config can bundle all files except images. For bundling images we use file-loader. First we install it:  </p>\n<div class="gatsby-highlight">\n      <pre class="language-shell"><code class="language-shell">npm i -D file-loader</code></pre>\n      </div>\n<p>The config for loading images :</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.(jpeg|jpg|png|gif|svg)$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n    loader<span class="token punctuation">:</span> <span class="token string">\'file-loader\'</span><span class="token punctuation">,</span>\n    options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'[name].[ext]\'</span><span class="token punctuation">,</span>\n      outputPath<span class="token punctuation">:</span> <span class="token string">\'./assets/media/\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<blockquote>\n<p>The output path must end with <code class="language-text">/</code> else the while saving the files, the output filename will be appended to the output path rather than saving it inside the folder.</p>\n</blockquote>\n<p>More details can be found <a href="https://github.com/webpack-contrib/file-loader">here</a>.</p>\n<p>Now let’s add images, The images should be saved inside /src/assets/media/. We also have to import the image in the HTML file. According to our webpack config the files will be saved in <em>assets/media</em> so we’ll reference that path in our HTML file :</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./assets/media/image.jpeg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>let’s test the config, run <code class="language-text">npm run start</code> from the command line. The browser should open up showing a red page with the image. Here’s the configuration we wrote till now :\n<br>\n<br>\n<strong>/config/webpack.common.js</strong></p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> CleanWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'clean-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'html-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'extract-text-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> ExtractCSSPlugin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'./assets/css/[name].css\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n    context<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../src"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        app<span class="token punctuation">:</span> <span class="token string">\'./assets/js/app.js\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'../dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        filename<span class="token punctuation">:</span> <span class="token string">\'assets/js/[name].bundle.js\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n                test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span>\n                exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>\n                use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"babel-loader"</span><span class="token punctuation">]</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">{</span>\n                test<span class="token punctuation">:</span> <span class="token regex">/\\.(html)$/</span><span class="token punctuation">,</span>\n                use<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    loader<span class="token punctuation">:</span> <span class="token string">\'html-loader\'</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">{</span>\n                test<span class="token punctuation">:</span> <span class="token regex">/\\.scss$/</span><span class="token punctuation">,</span>\n                include<span class="token punctuation">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'../src\'</span><span class="token punctuation">,</span> <span class="token string">\'assets\'</span><span class="token punctuation">,</span> <span class="token string">\'scss\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                use<span class="token punctuation">:</span> ExtractCSSPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n                    use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n                            loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n                            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                                minimize<span class="token punctuation">:</span> <span class="token boolean">true</span>\n                            <span class="token punctuation">}</span>\n                        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                        <span class="token punctuation">{</span>\n                            loader<span class="token punctuation">:</span> <span class="token string">\'sass-loader\'</span><span class="token punctuation">,</span>\n                            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n\n                            <span class="token punctuation">}</span>\n                        <span class="token punctuation">}</span>\n                    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n                    fallback<span class="token punctuation">:</span> <span class="token string">\'style-loader\'</span>                        \n                <span class="token punctuation">}</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">{</span>\n                test<span class="token punctuation">:</span> <span class="token regex">/\\.(jpeg|jpg|png|gif|svg)$/</span><span class="token punctuation">,</span>\n                use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n                    loader<span class="token punctuation">:</span> <span class="token string">\'file-loader\'</span><span class="token punctuation">,</span>\n                    options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                        name<span class="token punctuation">:</span> <span class="token string">\'[name].[ext]\'</span><span class="token punctuation">,</span>\n                        outputPath<span class="token punctuation">:</span> <span class="token string">\'./assets/media/\'</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span><span class="token punctuation">]</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'dist\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            filename<span class="token punctuation">:</span> <span class="token string">\'index.html\'</span><span class="token punctuation">,</span>\n            template<span class="token punctuation">:</span> <span class="token string">\'index.html\'</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        ExtractCSSPlugin\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> config<span class="token punctuation">;</span></code></pre>\n      </div>\n<p><strong>.babelrc</strong></p>\n<div class="gatsby-highlight">\n      <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n    <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"env"</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p><strong>/src/assets/scss/app.scss</strong></p>\n<div class="gatsby-highlight">\n      <pre class="language-scss"><code class="language-scss"><span class="token property"><span class="token variable">$bgcolor</span></span><span class="token punctuation">:</span> #a80c0c<span class="token punctuation">;</span>\n<span class="token selector">body </span><span class="token punctuation">{</span>\n    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token variable">$bgcolor</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p><strong>/src/assets/js/app.js</strong></p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">\'../scss/app.scss\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">func</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p><strong>/src/index.html</strong></p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Page Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./assets/media/image.jpeg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>Thats all for this post. In the next post we’ll see configuring webpack for production and a powerful feature of webpack called chunks.</p>',
frontmatter:{path:"/blog/webpack-loaders-and-plugins",title:"Webpack Configuration Part 2 : Loaders and Plugins",subtitle:"Configuring Loaders and plugins in Webpack.",headerImg:"https://raw.githubusercontent.com/webpack/media/master/logo/logo-on-white-bg.png",date:"3 Mar, 2018"}}},pathContext:{}}}});
//# sourceMappingURL=path---blog-webpack-loaders-and-plugins-5f2c482cc7e1de95e312.js.map